So: daniel is partt of sudoers (wheel on fedora)
sudo chmod a+rw /dev/ttyUSB*
Or how about we run the script as root... on wrtsl54gs at least.

TODO
  output to usb mass storage on wrtsl54gs with hub and three devices...

  tty should be reset WHEN ?
  Timeout loop is flaky ...

  Check that script fails if bad perms (ro, or none) on tty
  Check that speed is actuall reset...
    ** Unplug replug will do both of theese
  ADD DEBUGON echo to script!
  test by setting DEBUGOFF by hand....

All rolled into: /home/daniel/scalr-utils/CurrentCost/serialStamp.sh
/home/daniel/scalr-utils/CurrentCost/serialStamp.sh /dev/ttyUSB0 38400 AZ2 &
/home/daniel/scalr-utils/CurrentCost/serialStamp.sh /dev/ttyUSB1 57600 CC1 &
/home/daniel/scalr-utils/CurrentCost/serialStamp.sh /dev/ttyUSB2 57600 CC2 &



# Aztech-2
stty -F /dev/ttyUSB0 speed 38400
echo DEBUGON>/dev/ttyUSB0
cat /dev/ttyUSB0 > iMetricalData/AZ2-`date +%Y%m%dT%H%M%S%z`.log &
# CurrentCost-1
stty -F /dev/ttyUSB1 speed 57600
cat /dev/ttyUSB1 > iMetricalData/CC1-`date +%Y%m%dT%H%M%S%z`.log &
# CurrentCost-2
stty -F /dev/ttyUSB2 speed 57600
cat /dev/ttyUSB2 > iMetricalData/CC2-`date +%Y%m%dT%H%M%S%z`.log &

Stamping on top ...

tail -f CC1-20090701T225212-0400.log | while read line; do echo `date +%Y-%m-%dT%H:%M:%S%z` $line; done > CC1-20090701T225212-0400.stamp.log &
tail -f CC2-20090701T225213-0400.log | while read line; do echo `date +%Y-%m-%dT%H:%M:%S%z` $line; done > CC2-20090701T225213-0400.stamp.log &
tail -f AZ2-20090701T225132-0400.log | while read line; do echo `date +%Y-%m-%dT%H:%M:%S%z` $line; done > AZ2-20090701T225132-0400.stamp.log &


start comparing:
-run the parser:
  python ../scalr-utils/CurrentCost/ParseStampedCC.py < CC1-20090701T225212-0400.stamp.log
  python ../scalr-utils/CurrentCost/ParseStampedCC.py < CC2-20090701T225213-0400.stamp.log

-make a big csv
cat CC*stamp.log|python ../scalr-utils/CurrentCost/ParseStampedCC.py|grep -v "^INSERT">coco.csv

make a big sql:
cat CC*stamp.log|python ../scalr-utils/CurrentCost/ParseStampedCC.py|grep "^INSERT">coco.sql

pump to cantor

mysqladmin create currentcost

DROP TABLE IF EXISTS `cc_native`;
CREATE TABLE `cc_native` (
  `stamp` datetime NOT NULL default '1970-01-01 00:00:00',
  `watt` int(11) NOT NULL default '0',
  `sensorid` varchar(255) default NULL,
  `ch1watt` int(11) NOT NULL default '0',
  `ch2watt` int(11) NOT NULL default '0',
  `drift` int(11) NOT NULL default '0',
  PRIMARY KEY  (`stamp`),
  KEY `byStampSensor` (`stamp`,`sensorid`),
  KEY `bySensorStamp` (`stamp`,`sensorid`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

mysql currentcost


now some selects against ted.watt

select sensorid,count(*) from cc_native group by sensorid;
+----------+----------+
| sensorid | count(*) |
+----------+----------+
| 1214     |     3954 | 
| 3887     |     2165 | 
+----------+----------+

select cc.stamp,cc.watt,cc.sensorid,tt.stamp,tt.watt from cc_native cc,ted.watt tt where tt.stamp=cc.stamp and cc.sensorid=3887;

select cc.watt as CC3887, tt.watt as TED from cc_native cc,ted.watt tt where tt.stamp=cc.stamp and cc.sensorid=3887;

select cc.stamp as GMT,cc.sensorid as SensorID, cc.watt as CC, tt.watt as TED from cc_native cc,ted.watt tt where tt.stamp=cc.stamp order by cc.stamp;

as tabs
mysql currentcost -b -e "select cc.stamp as GMT,cc.sensorid as SensorID, cc.watt as CC, tt.watt as TED from cc_native cc,ted.watt tt where tt.stamp=cc.stamp order by cc.stamp;"

How about aggregates:

DROP TABLE IF EXISTS `cc_agg_minute`;
CREATE TABLE `cc_agg_minute` (
  `stamp` datetime NOT NULL default '1970-01-01 00:00:00',
  `watt_ted` int(11) NOT NULL default '0',
  `watt_cc1` int(11) NOT NULL default '0',
  `watt_cc2` int(11) NOT NULL default '0',
  `watt_cc1_ch1` int(11) NOT NULL default '0',
  `watt_cc1_ch2` int(11) NOT NULL default '0',
  `watt_cc2_ch1` int(11) NOT NULL default '0',
  `watt_cc2_ch2` int(11) NOT NULL default '0',
  PRIMARY KEY  (`stamp`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

DROP TABLE IF EXISTS `cc_agg_tenminute`;
CREATE TABLE `cc_agg_tenminute` (
  `stamp` datetime NOT NULL default '1970-01-01 00:00:00',
  `watt_ted` int(11) NOT NULL default '0',
  `watt_cc1` int(11) NOT NULL default '0',
  `watt_cc2` int(11) NOT NULL default '0',
  `watt_cc1_ch1` int(11) NOT NULL default '0',
  `watt_cc1_ch2` int(11) NOT NULL default '0',
  `watt_cc2_ch1` int(11) NOT NULL default '0',
  `watt_cc2_ch2` int(11) NOT NULL default '0',
  PRIMARY KEY  (`stamp`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

DROP TABLE IF EXISTS `cc_agg_hour`;
CREATE TABLE `cc_agg_hour` (
  `stamp` datetime NOT NULL default '1970-01-01 00:00:00',
  `watt_ted` int(11) NOT NULL default '0',
  `watt_cc1` int(11) NOT NULL default '0',
  `watt_cc2` int(11) NOT NULL default '0',
  `watt_cc1_ch1` int(11) NOT NULL default '0',
  `watt_cc1_ch2` int(11) NOT NULL default '0',
  `watt_cc2_ch1` int(11) NOT NULL default '0',
  `watt_cc2_ch2` int(11) NOT NULL default '0',
  PRIMARY KEY  (`stamp`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;


produce aggregates for minute and tenminute:
get min-max from cc_native : 2009-07-02 20:20:17 | 2009-07-03 03:39:10 

# Hour-TED
select concat(left(stamp,13),':00:00') as g, avg(watt) from ted.watt where stamp>='2009-07-02 20:20:00' and stamp<'2009-07-03 03:40:00' group by g;
# Hour-CC1
select concat(left(stamp,13),':00:00') as g, avg(watt) from cc_native where sensorid=1214 group by g;
# Hour-CC2
select concat(left(stamp,13),':00:00') as g, avg(watt) from cc_native where sensorid=3887 group by g;
# 4 channels
select concat(left(stamp,13),':00:00') as g, avg(ch1watt) from cc_native where sensorid=1214 group by g;
select concat(left(stamp,13),':00:00') as g, avg(ch2watt) from cc_native where sensorid=1214 group by g;
select concat(left(stamp,13),':00:00') as g, avg(ch1watt) from cc_native where sensorid=3887 group by g;
select concat(left(stamp,13),':00:00') as g, avg(ch2watt) from cc_native where sensorid=3887 group by g;


now insert: creates all key values,

######### do Hour just for test: actualy create minute, and average to get tenminute, and hour

insert into cc_agg_hour(stamp,watt_ted) select concat(left(stamp,13),':00:00') as g, avg(watt) from ted.watt where stamp>='2009-07-02 20:20:00' and stamp<'2009-07-03 03:40:00' group by g;
update cc_agg_hour dst set watt_cc1=(select avg(src.watt) from cc_native src where src.sensorid=1214 and dst.stamp=concat(left(src.stamp,13),':00:00'));
update cc_agg_hour dst set watt_cc2=(select avg(src.watt) from cc_native src where src.sensorid=3887 and dst.stamp=concat(left(src.stamp,13),':00:00'));
update cc_agg_hour dst set watt_cc1_ch1=(select avg(src.ch1watt) from cc_native src where src.sensorid=1214 and dst.stamp=concat(left(src.stamp,13),':00:00'));
update cc_agg_hour dst set watt_cc1_ch2=(select avg(src.ch2watt) from cc_native src where src.sensorid=1214 and dst.stamp=concat(left(src.stamp,13),':00:00'));
update cc_agg_hour dst set watt_cc2_ch1=(select avg(src.ch1watt) from cc_native src where src.sensorid=3887 and dst.stamp=concat(left(src.stamp,13),':00:00'));
update cc_agg_hour dst set watt_cc2_ch2=(select avg(src.ch2watt) from cc_native src where src.sensorid=3887 and dst.stamp=concat(left(src.stamp,13),':00:00'));

insert into cc_agg_minute(stamp,watt_ted) select concat(left(stamp,16),':00') as g, avg(watt) from ted.watt where stamp>='2009-07-02 20:20:00' and stamp<'2009-07-03 03:40:00' group by g;
update cc_agg_minute dst set watt_cc1=(select avg(src.watt) from cc_native src where src.sensorid=1214 and dst.stamp=concat(left(src.stamp,16),':00'));
update cc_agg_minute dst set watt_cc2=(select avg(src.watt) from cc_native src where src.sensorid=3887 and dst.stamp=concat(left(src.stamp,16),':00'));
update cc_agg_minute dst set watt_cc1_ch1=(select avg(src.ch1watt) from cc_native src where src.sensorid=1214 and dst.stamp=concat(left(src.stamp,16),':00'));
update cc_agg_minute dst set watt_cc1_ch2=(select avg(src.ch2watt) from cc_native src where src.sensorid=1214 and dst.stamp=concat(left(src.stamp,16),':00'));
update cc_agg_minute dst set watt_cc2_ch1=(select avg(src.ch1watt) from cc_native src where src.sensorid=3887 and dst.stamp=concat(left(src.stamp,16),':00'));
update cc_agg_minute dst set watt_cc2_ch2=(select avg(src.ch2watt) from cc_native src where src.sensorid=3887 and dst.stamp=concat(left(src.stamp,16),':00'));

before:
mysql> select * from cc_agg_hour;
+---------------------+----------+----------+----------+--------------+--------------+--------------+--------------+
| stamp               | watt_ted | watt_cc1 | watt_cc2 | watt_cc1_ch1 | watt_cc1_ch2 | watt_cc2_ch1 | watt_cc2_ch2 |
+---------------------+----------+----------+----------+--------------+--------------+--------------+--------------+
| 2009-07-02 20:00:00 |     1390 |     1200 |     1212 |          595 |          605 |          628 |          584 | 
| 2009-07-02 21:00:00 |     1440 |     1161 |     1172 |          637 |          524 |          547 |          624 | 
| 2009-07-02 22:00:00 |     5134 |     4382 |     4435 |         1970 |         2412 |         2417 |         2018 | 
| 2009-07-02 23:00:00 |     2695 |     2365 |     2402 |         1152 |         1213 |         1224 |         1178 | 
| 2009-07-03 00:00:00 |     1334 |     1211 |     1225 |          588 |          623 |          638 |          587 | 
| 2009-07-03 01:00:00 |     1845 |     1568 |        0 |          856 |          711 |            0 |            0 | 
| 2009-07-03 02:00:00 |     3086 |     2643 |        0 |         1424 |         1218 |            0 |            0 | 
| 2009-07-03 03:00:00 |     1357 |     1201 |        0 |          745 |          456 |            0 |            0 | 
+---------------------+----------+----------+----------+--------------+--------------+--------------+--------------+


replace into cc_agg_hour(stamp,watt_ted,watt_cc1,watt_cc2,watt_cc1_ch1,watt_cc1_ch2,watt_cc2_ch1,watt_cc2_ch2) 
 select concat(left(stamp,13),':00:00') as g, avg(watt_ted),avg(watt_cc1),avg(watt_cc2),avg(watt_cc1_ch1),avg(watt_cc1_ch2),avg(watt_cc2_ch1),avg(watt_cc2_ch2) 
 from cc_agg_minute group by g;

replace into cc_agg_tenminute(stamp,watt_ted,watt_cc1,watt_cc2,watt_cc1_ch1,watt_cc1_ch2,watt_cc2_ch1,watt_cc2_ch2) 
 select concat(left(stamp,15),'0:00') as g, avg(watt_ted),avg(watt_cc1),avg(watt_cc2),avg(watt_cc1_ch1),avg(watt_cc1_ch2),avg(watt_cc2_ch1),avg(watt_cc2_ch2) 
 from cc_agg_minute group by g;

after...
mysql> select * from cc_agg_hour;
+---------------------+----------+----------+----------+--------------+--------------+--------------+--------------+
| stamp               | watt_ted | watt_cc1 | watt_cc2 | watt_cc1_ch1 | watt_cc1_ch2 | watt_cc2_ch1 | watt_cc2_ch2 |
+---------------------+----------+----------+----------+--------------+--------------+--------------+--------------+
| 2009-07-02 20:00:00 |     1390 |     1200 |     1212 |          595 |          605 |          628 |          584 | 
| 2009-07-02 21:00:00 |     1444 |     1162 |     1146 |          638 |          524 |          531 |          616 | 
| 2009-07-02 22:00:00 |     4977 |     4403 |     4664 |         1976 |         2427 |         2566 |         2098 | 
| 2009-07-02 23:00:00 |     2695 |     2390 |     2434 |         1165 |         1225 |         1240 |         1194 | 
| 2009-07-03 00:00:00 |     1334 |     1211 |     1106 |          587 |          623 |          577 |          529 | 
| 2009-07-03 01:00:00 |     1845 |     1569 |        0 |          858 |          711 |            0 |            0 | 
| 2009-07-03 02:00:00 |     3086 |     2649 |        0 |         1429 |         1220 |            0 |            0 | 
| 2009-07-03 03:00:00 |     1357 |     1195 |        0 |          742 |          453 |            0 |            0 | 
+---------------------+----------+----------+----------+--------------+--------------+--------------+--------------+



out to tsv:

mysql currentcost -b -e "select * from cc_agg_minute" >agg_minute.tsv
mysql currentcost -b -e "select * from cc_agg_tenminute" >agg_tenminute.tsv
mysql currentcost -b -e "select * from cc_agg_hour" >agg_hour.tsv


Starting Aztech:
  connecting from vik-> mysql on cantor...
  mysql -e "grant all on *.* to daniel@192.168.5.226"
from vik:...

Time zone info: http://dev.mysql.com/doc/refman/5.1/en/time-zone-support.html
Load em up on cantor:
  mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql
Wow:
 mysql mysql -e "select * from time_zone_name where Name like '%Montreal%'"
+------------------------+--------------+
| Name                   | Time_zone_id |
+------------------------+--------------+
| America/Montreal       |          154 | 
| posix/America/Montreal |          704 | 
| right/America/Montreal |         1255 | 
+------------------------+--------------+

Timezone offsets: straight interval math
	 mysql -h cantor ted -e "select stamp,stamp - interval 4 hour,watt from watt_hour where stamp>'2009-07-03'"
Using CONVERT_TZ(dt,from_tz,to_tz)
  mysql -h cantor ted -e "SELECT @@global.time_zone, @@session.time_zone;"

Round trip
mysql -h cantor ted -e "SELECT now(),CONVERT_TZ(now(),'America/Montreal','GMT'),CONVERT_TZ(CONVERT_TZ(now(),'America/Montreal','GMT'),'GMT','America/Montreal')""

This is how I can know that America/Montreal is My System Timezone
[daniel@cantor ~]$ md5sum /etc/localtime 
64defc8d6747feef853cd3abbc645116  /etc/localtime
[daniel@cantor ~]$ find /usr/share/zoneinfo/ -type f -exec md5sum {} \;|grep 64defc8d6747feef853cd3abbc645116
64defc8d6747feef853cd3abbc645116  /usr/share/zoneinfo/posix/America/Montreal
64defc8d6747feef853cd3abbc645116  /usr/share/zoneinfo/America/Montreal

Bingo: Confirm transitions at 2008-11-02, and 2009-03-08
mysql -h cantor ted -e "SELECT stamp as GMT,CONVERT_TZ(stamp,'GMT','America/Montreal') as Eastern,TIMEDIFF(CONVERT_TZ(stamp,'GMT','America/Montreal'),stamp) as UTCOFFSET, watt from watt_hour order by stamp"

+---------------------+---------------------+-----------+------+
| GMT                 | Eastern             | UTCOFFSET | watt |
+---------------------+---------------------+-----------+------+
| 2008-07-30 00:00:00 | 2008-07-29 20:00:00 | -04:00:00 |  596 | 
| 2008-11-02 05:00:00 | 2008-11-02 01:00:00 | -04:00:00 |  932 | 
| 2008-11-02 06:00:00 | 2008-11-02 01:00:00 | -05:00:00 | 1276 | 
| 2009-03-08 06:00:00 | 2009-03-08 01:00:00 | -05:00:00 | 1590 | 
| 2009-03-08 07:00:00 | 2009-03-08 03:00:00 | -04:00:00 | 1590 | 
| 2009-07-03 19:00:00 | 2009-07-03 15:00:00 | -04:00:00 |  496 | 
+---------------------+---------------------+-----------+------+

So now for info purposes, how are undefined time handled!
mysql -t -h cantor ted -e "select CONVERT_TZ('2008-11-02 01:30:00','America/Montreal','GMT')"
mysql -t -h cantor ted -e "select CONVERT_TZ('2009-03-08 02:00:00','America/Montreal','GMT')"

Ambiguous    2008-11-02 01:30:00 Eastern -> GMT: 2008-11-02 05:30:00 but it could have been 2008-11-02 06:30:00
   The Hole all maps to the instant:
Non-Existent 2009-03-08 02:00:00 Eastern -> GMT: 2009-03-08 07:00:00
	     2009-03-08 02:01:00 Eastern -> GMT: 2009-03-08 07:00:00
	     2009-03-08 02:30:00 Eastern -> GMT: 2009-03-08 07:00:00
	     2009-03-08 02:59:00 Eastern -> GMT: 2009-03-08 07:00:00
	     2009-03-08 03:00:00 Eastern -> GMT: 2009-03-08 07:00:00

mysql -t -h cantor ted -e "select (UNIX_TIMESTAMP('2009-03-09')-UNIX_TIMESTAMP('2009-03-08'))/3600"
  23.0000
mysql -t -h cantor ted -e "select (UNIX_TIMESTAMP('2008-11-03')-UNIX_TIMESTAMP('2008-11-02'))/3600"
  25.0000 

How about arithmetic: I THINK ARITHMETIC is TIMEZONE AGNOSTIC
 2009-03-08 00:59:00 + 2 minutes
 2008-11-02 00:59:00 + 2 minutes
mysql -t -h cantor ted -e "select '2009-03-08 00:59:00','2009-03-08 00:59:00'+interval 2 minute"
+---------------------+-----------------------------------------+
| 2009-03-08 00:59:00 | '2009-03-08 00:59:00'+interval 2 minute |
+---------------------+-----------------------------------------+
| 2009-03-08 00:59:00 | 2009-03-08 01:01:00                     | 
+---------------------+-----------------------------------------+
mysql -t -h cantor ted -e "select '2008-11-02 00:59:00','2008-11-02 00:59:00'+interval 2 minutes"
+---------------------+-----------------------------------------+
| 2008-11-02 00:59:00 | '2008-11-02 00:59:00'+interval 2 minute |
+---------------------+-----------------------------------------+
| 2008-11-02 00:59:00 | 2008-11-02 01:01:00                     | 
+---------------------+-----------------------------------------+

OK back to Aztech:
These are my stamped readings
grep "0400 \[R\]" AZ2-20090701T225132-0400.stamp.log | grep 23704002
Pick the first-last lines:
  By Hand: My stamp [R] type,meter id, wh/10,?, seconds since power,?,?,?,?,?,reading id
2009-07-02T16:20:17-0400 [R],07,23704002,3342918,10,82568,00,A,0B,28,06DB,1739
2009-07-03T15:13:26-0400 [R],07,23704002,3346280,10,165338,01,A,0B,2B,0997,2439
Math on time stamps:
165338 - 82568  = 82770 secnods between theese two readings
mysql -t -h cantor ted -e "select '2009-07-02 16:20:17'+ interval (165338 - 82568) second"
+---------------------------------------------------------+
| '2009-07-02 16:20:17'+ interval (165338 - 82568) second |
+---------------------------------------------------------+
| 2009-07-03 15:19:47                                     | 
+---------------------------------------------------------+
Close but not exact!

Now let's check avg power consumption on ted in that period:

and compare that agaist both readings: 3346280-3342918 (10wh)

mysql -t -h cantor ted -e "select avg(watt),min(stamp),max(stamp), UNIX_TIMESTAMP(max(stamp))-UNIX_TIMESTAMP(min(stamp)) as seconds,(UNIX_TIMESTAMP(max(stamp))-UNIX_TIMESTAMP(min(stamp)))*avg(watt)/3600/1000 as kWh_TED,(3346280-3342918)*10/1000 as kWh_AZ from watt where stamp >='2009-07-02 16:20:17' and stamp <'2009-07-03 15:13:26'"
+-----------+---------------------+---------------------+---------+-----------------+---------+
| avg(watt) | min(stamp)          | max(stamp)          | seconds | kWh_TED         | kWh_AZ  |
+-----------+---------------------+---------------------+---------+-----------------+---------+
| 1427.8363 | 2009-07-02 16:20:17 | 2009-07-03 15:13:25 |   82388 | 32.676826269422 | 33.6200 | 
+-----------+---------------------+---------------------+---------+-----------------+---------+

Old Reading:
              grep 23704002 ../scalr-utils/Aztech-data/Aztech-01.txt |head
2009-01-23 02:20:54 EST |Response|=  41 : 2008/09/23 15:26:22 New Unit ID= 23704002
2009-01-23 02:22:49 EST |Response|=  57 : [R],07,23704002,2790572,10,10362027,00,A,14,26,676F,26363
2009-01-23 02:23:22 EST |Response|=  57 : [R],07,23704002,2790572,10,10362061,00,A,14,2E,6774,26368
and thos from Aztech-02.txt (binary ???)
2009-01-23 04:14:18 EST |Response|=  53 : [R],07,23704002,2790799,10,60167,01,A,0B,23,08E7,2121
